package org.bedepay.rareItems.commands;

import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import net.kyori.adventure.text.format.TextDecoration;
import org.bedepay.rareItems.RareItems;
import org.bedepay.rareItems.rarity.Rarity;
import org.bedepay.rareItems.util.ItemUtil;
import org.bedepay.rareItems.util.MaterialTypeChecker;
import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.command.TabCompleter;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.persistence.PersistentDataType;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ RareItems —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∏ UX
 * 
 * @author BedePay
 * @version 3.0
 */
public class RareItemsCommand implements CommandExecutor, TabCompleter {
    
    private final RareItems plugin;
    private final MaterialTypeChecker materialTypeChecker;
    
    // –ö—ç—à –¥–ª—è Tab Completion
    private final Map<String, List<String>> tabCompletionCache = new HashMap<>();
    private long lastCacheUpdate = 0;
    private static final long CACHE_DURATION = 30000; // 30 —Å–µ–∫—É–Ω–¥
    
    // –ü–æ–¥–∫–æ–º–∞–Ω–¥—ã —Å –∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
    private final Map<String, String> subCommandPermissions = Map.of(
        "reload", "rareitems.admin.reload",
        "info", "rareitems.admin.info", 
        "give", "rareitems.admin.give",
        "inspect", "rareitems.inspect",
        "upgrade", "rareitems.admin.upgrade",
        "debug", "rareitems.admin.debug",
        "validate", "rareitems.admin.validate",
        "help", ""
    );
    
    public RareItemsCommand(RareItems plugin) {
        this.plugin = plugin;
        this.materialTypeChecker = new MaterialTypeChecker(plugin);
        updateTabCompletionCache();
    }
    
    @Override
    public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, 
                           @NotNull String label, @NotNull String[] args) {
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        updateCacheIfNeeded();
        
        if (args.length == 0) {
            showHelp(sender);
            return true;
        }
        
        String subCommand = args[0].toLowerCase();
        
        return switch (subCommand) {
            case "reload" -> handleReload(sender);
            case "info" -> handleInfo(sender, args);
            case "give" -> handleGive(sender, args);
            case "inspect" -> handleInspect(sender);
            case "upgrade" -> handleUpgrade(sender, args);
            case "debug" -> handleDebug(sender, args);
            case "validate" -> handleValidate(sender);
            case "help" -> { showHelp(sender); yield true; }
            default -> handleUnknownCommand(sender, subCommand);
        };
    }
    
    @Override
    public @Nullable List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command,
                                              @NotNull String alias, @NotNull String[] args) {
        
        updateCacheIfNeeded();
        
        return switch (args.length) {
            case 1 -> getFilteredSubCommands(sender, args[0]);
            case 2 -> getSecondArgumentCompletions(sender, args);
            case 3 -> getThirdArgumentCompletions(sender, args);
            case 4 -> getFourthArgumentCompletions(sender, args);
            case 5 -> getFifthArgumentCompletions(sender, args);
            default -> List.of();
        };
    }
    
    // ================================
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    // ================================
    
    private boolean handleReload(CommandSender sender) {
        if (!hasPermission(sender, "rareitems.admin.reload")) {
            return true;
        }
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            plugin.reloadPlugin();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à tab completion –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            updateTabCompletionCache();
            
            sendSuccessMessage(sender, "‚úÖ –ü–ª–∞–≥–∏–Ω RareItems –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!");
            sendSuccessMessage(sender, "  üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
            sendSuccessMessage(sender, "  üóÇÔ∏è –ö—ç—à–∏ –æ—á–∏—â–µ–Ω—ã");
            sendSuccessMessage(sender, "  üéØ MaterialTypeChecker –æ–±–Ω–æ–≤–ª–µ–Ω");
            
            if (plugin.getConfigManager().isDebugMode()) {
                logDebug("–ü–ª–∞–≥–∏–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –∏–≥—Ä–æ–∫–æ–º: %s", sender.getName());
            }
            
        } catch (Exception e) {
            sendErrorMessage(sender, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: " + e.getMessage());
            plugin.getLogger().severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–≥–∏–Ω–∞: " + e.getMessage());
            e.printStackTrace();
        }
        
        return true;
    }
    
    private boolean handleInfo(CommandSender sender, String[] args) {
        if (!hasPermission(sender, "rareitems.admin.info")) {
            return true;
        }
        
        if (args.length == 1) {
            showGeneralInfo(sender);
        } else {
            String rarityId = args[1].toLowerCase();
            showRarityInfo(sender, rarityId);
        }
        
        return true;
    }
    
    private boolean handleGive(CommandSender sender, String[] args) {
        if (!hasPermission(sender, "rareitems.admin.give")) {
            return true;
        }
        
        if (args.length < 4) {
            sendUsageMessage(sender, "/rareitems give <–∏–≥—Ä–æ–∫> <–º–∞—Ç–µ—Ä–∏–∞–ª> <—Ä–µ–¥–∫–æ—Å—Ç—å> [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]");
            return true;
        }
        
        // –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        String playerName = args[1];
        String materialName = args[2];
        String rarityId = args[3];
        int amount = args.length >= 5 ? parseAmount(args[4]) : 1;
        
        if (amount <= 0) {
            sendErrorMessage(sender, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º");
            return true;
        }
        
        // –ù–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞
        Player target = Bukkit.getPlayer(playerName);
        if (target == null) {
            sendErrorMessage(sender, "‚ùå –ò–≥—Ä–æ–∫ '" + playerName + "' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ–Ω–ª–∞–π–Ω");
            return true;
        }
        
        // –ü–∞—Ä—Å–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª
        Material material = parseMaterial(materialName);
        if (material == null) {
            sendErrorMessage(sender, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: " + materialName);
            showMaterialSuggestions(sender);
            return true;
        }
        
        if (!isWeaponOrArmor(material)) {
            sendErrorMessage(sender, "‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ä—É–∂–∏–µ–º –∏–ª–∏ –±—Ä–æ–Ω–µ–π");
            return true;
        }
        
        // –ù–∞–π—Ç–∏ —Ä–µ–¥–∫–æ—Å—Ç—å
        Rarity rarity = plugin.getConfigManager().getRarityById(rarityId);
        if (rarity == null) {
            sendErrorMessage(sender, "‚ùå –†–µ–¥–∫–æ—Å—Ç—å '" + rarityId + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
            showAvailableRarities(sender);
            return true;
        }
        
        // –°–æ–∑–¥–∞—Ç—å –∏ –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã
        int itemsGiven = 0;
        for (int i = 0; i < amount; i++) {
            ItemStack item = new ItemStack(material);
            ItemStack rareItem = ItemUtil.applyRarity(plugin, item, rarity);
            
            Map<Integer, ItemStack> notFitted = target.getInventory().addItem(rareItem);
            if (notFitted.isEmpty()) {
                itemsGiven++;
            } else {
                // –ï—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —ç—Ç–æ–º
                break;
            }
        }
        
        String materialDisplayName = formatMaterialName(material);
        String amountText = itemsGiven > 1 ? " x" + itemsGiven : "";
        
        if (itemsGiven > 0) {
            target.sendMessage(Component.text("üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ " + rarity.getDisplayName() + " " + materialDisplayName + amountText + "!")
                    .color(NamedTextColor.GREEN));
            
            sendSuccessMessage(sender, "‚úÖ –í—ã–¥–∞–Ω–æ " + rarity.getDisplayName() + " " + materialDisplayName + amountText + " –∏–≥—Ä–æ–∫—É " + target.getName());
            
            if (itemsGiven < amount) {
                sendWarningMessage(sender, "‚ö†Ô∏è –í—ã–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ " + itemsGiven + " –∏–∑ " + amount + " –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω)");
            }
            
            logDebug("–ò–≥—Ä–æ–∫ %s –≤—ã–¥–∞–ª %s %s x%d –∏–≥—Ä–æ–∫—É %s", sender.getName(), rarity.id(), material.name(), itemsGiven, target.getName());
        } else {
            sendErrorMessage(sender, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã - –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ –ø–æ–ª–æ–Ω");
        }
        
        return true;
    }
    
    private boolean handleInspect(CommandSender sender) {
        if (!hasPermission(sender, "rareitems.inspect")) {
            return true;
        }
        
        if (!(sender instanceof Player player)) {
            sendErrorMessage(sender, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤");
            return true;
        }
        
        ItemStack item = player.getInventory().getItemInMainHand();
        if (item.getType() == Material.AIR) {
            sendErrorMessage(player, "‚ùå –í–æ–∑—å–º–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –≤ —Ä—É–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏");
            return true;
        }
        
        ItemMeta meta = item.getItemMeta();
        if (meta == null) {
            sendErrorMessage(player, "‚ùå –≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö");
            return true;
        }
        
        if (!meta.getPersistentDataContainer().has(ItemUtil.getKey(plugin, "rarity"), PersistentDataType.STRING)) {
            sendErrorMessage(player, "‚ùå –≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –∏–º–µ–µ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏");
            return true;
        }
        
        String rarityId = meta.getPersistentDataContainer().get(ItemUtil.getKey(plugin, "rarity"), PersistentDataType.STRING);
        Rarity rarity = plugin.getConfigManager().getRarityById(rarityId);
        
        if (rarity == null) {
            sendErrorMessage(player, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å: " + rarityId);
            return true;
        }
        
        showItemInfo(player, item, rarity);
        return true;
    }
    
    private boolean handleUpgrade(CommandSender sender, String[] args) {
        if (!hasPermission(sender, "rareitems.admin.upgrade")) {
            return true;
        }
        
        if (!(sender instanceof Player player)) {
            sendErrorMessage(sender, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤");
            return true;
        }
        
        if (args.length < 2) {
            sendUsageMessage(player, "/rareitems upgrade <—Ä–µ–¥–∫–æ—Å—Ç—å>");
            return true;
        }
        
        String rarityId = args[1].toLowerCase();
        
        ItemStack item = player.getInventory().getItemInMainHand();
        if (item.getType() == Material.AIR) {
            sendErrorMessage(player, "‚ùå –í–æ–∑—å–º–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –≤ —Ä—É–∫—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è");
            return true;
        }
        
        if (!isWeaponOrArmor(item.getType())) {
            sendErrorMessage(player, "‚ùå –ú–æ–∂–Ω–æ —É–ª—É—á—à–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ä—É–∂–∏–µ –∏ –±—Ä–æ–Ω—é");
            return true;
        }
        
        Rarity rarity = plugin.getConfigManager().getRarityById(rarityId);
        if (rarity == null) {
            sendErrorMessage(player, "‚ùå –†–µ–¥–∫–æ—Å—Ç—å '" + rarityId + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
            showAvailableRarities(player);
            return true;
        }
        
        ItemStack upgradedItem = ItemUtil.applyRarity(plugin, item, rarity);
        player.getInventory().setItemInMainHand(upgradedItem);
        
        sendSuccessMessage(player, "‚ú® –ü—Ä–µ–¥–º–µ—Ç —É–ª—É—á—à–µ–Ω –¥–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ " + rarity.getDisplayName() + "!");
        
        logDebug("–ò–≥—Ä–æ–∫ %s —É–ª—É—á—à–∏–ª –ø—Ä–µ–¥–º–µ—Ç %s –¥–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ %s", player.getName(), item.getType().name(), rarity.id());
        
        return true;
    }
    
    private boolean handleDebug(CommandSender sender, String[] args) {
        if (!hasPermission(sender, "rareitems.admin.debug")) {
            return true;
        }
        
        if (args.length == 1) {
            showDebugInfo(sender);
        } else {
            String action = args[1].toLowerCase();
            handleDebugAction(sender, action);
        }
        
        return true;
    }
    
    private boolean handleValidate(CommandSender sender) {
        if (!hasPermission(sender, "rareitems.admin.validate")) {
            return true;
        }
        
        try {
            sendSuccessMessage(sender, "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ RareItems...");
            
            List<String> issues = validateConfig();
            
            if (issues.isEmpty()) {
                sendSuccessMessage(sender, "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∞–ª–∏–¥–Ω–∞!");
                sendSuccessMessage(sender, "  üìã –í—Å–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã");
                sendSuccessMessage(sender, "  üéØ –í—Å–µ —à–∞–Ω—Å—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ");
                sendSuccessMessage(sender, "  üé® –í—Å–µ —Ü–≤–µ—Ç–∞ –≤–∞–ª–∏–¥–Ω—ã");
                sendSuccessMessage(sender, "  üîä –í—Å–µ –∑–≤—É–∫–∏ –∏ —á–∞—Å—Ç–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç");
            } else {
                sendWarningMessage(sender, "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:");
                for (String issue : issues) {
                    sender.sendMessage(Component.text("  ‚Ä¢ " + issue).color(NamedTextColor.RED));
                }
                sendWarningMessage(sender, "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥.");
            }
            
        } catch (Exception e) {
            sendErrorMessage(sender, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " + e.getMessage());
            e.printStackTrace();
        }
        
        return true;
    }
    
    private boolean handleUnknownCommand(CommandSender sender, String subCommand) {
        sendErrorMessage(sender, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞: " + subCommand);
        sender.sendMessage(Component.text("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rareitems help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥").color(NamedTextColor.GRAY));
        return true;
    }
    
    // ================================
    // Tab Completion –ª–æ–≥–∏–∫–∞
    // ================================
    
    private List<String> getFilteredSubCommands(CommandSender sender, String partial) {
        return subCommandPermissions.entrySet().stream()
                .filter(entry -> entry.getKey().startsWith(partial.toLowerCase()))
                .filter(entry -> entry.getValue().isEmpty() || sender.hasPermission(entry.getValue()))
                .map(Map.Entry::getKey)
                .sorted()
                .collect(Collectors.toList());
    }
    
    private List<String> getSecondArgumentCompletions(CommandSender sender, String[] args) {
        String subCommand = args[0].toLowerCase();
        String partial = args[1].toLowerCase();
        
        return switch (subCommand) {
            case "give" -> getOnlinePlayerNames(partial);
            case "upgrade", "info" -> getRarityIds(partial);
            case "debug" -> getDebugOptions(partial);
            default -> List.of();
        };
    }
    
    private List<String> getThirdArgumentCompletions(CommandSender sender, String[] args) {
        if (!"give".equals(args[0].toLowerCase())) {
            return List.of();
        }
        
        String partial = args[2].toLowerCase();
        return getWeaponArmorMaterials(partial);
    }
    
    private List<String> getFourthArgumentCompletions(CommandSender sender, String[] args) {
        if (!"give".equals(args[0].toLowerCase())) {
            return List.of();
        }
        
        String partial = args[3].toLowerCase();
        return getRarityIds(partial);
    }
    
    private List<String> getFifthArgumentCompletions(CommandSender sender, String[] args) {
        if (!"give".equals(args[0].toLowerCase())) {
            return List.of();
        }
        
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 64
        return Stream.of("1", "8", "16", "32", "64")
                .filter(num -> num.startsWith(args[4]))
                .collect(Collectors.toList());
    }
    
    // ================================
    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Tab Completion
    // ================================
    
    private void updateCacheIfNeeded() {
        long now = System.currentTimeMillis();
        if (now - lastCacheUpdate > CACHE_DURATION) {
            updateTabCompletionCache();
        }
    }
    
    private void updateTabCompletionCache() {
        tabCompletionCache.clear();
        
        // –ö—ç—à–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–¥–∫–æ—Å—Ç–µ–π
        List<String> rarityIds = plugin.getConfigManager().getAllRarities().stream()
                .map(Rarity::id)
                .sorted()
                .collect(Collectors.toList());
        tabCompletionCache.put("rarities", rarityIds);
        
        // –ö—ç—à–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ä—É–∂–∏—è –∏ –±—Ä–æ–Ω–∏
        List<String> weaponArmorMaterials = Arrays.stream(Material.values())
                .filter(Material::isItem)
                .filter(this::isWeaponOrArmor)
                .map(material -> material.name().toLowerCase())
                .sorted()
                .collect(Collectors.toList());
        tabCompletionCache.put("weapons_armor", weaponArmorMaterials);
        
        // –ö—ç—à–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏
        tabCompletionCache.put("debug_options", List.of("true", "false", "on", "off", "enable", "disable"));
        
        lastCacheUpdate = System.currentTimeMillis();
    }
    
    private List<String> getOnlinePlayerNames(String partial) {
        return Bukkit.getOnlinePlayers().stream()
                .map(Player::getName)
                .filter(name -> name.toLowerCase().startsWith(partial))
                .sorted()
                .collect(Collectors.toList());
    }
    
    private List<String> getRarityIds(String partial) {
        return tabCompletionCache.getOrDefault("rarities", List.of()).stream()
                .filter(id -> id.startsWith(partial))
                .collect(Collectors.toList());
    }
    
    private List<String> getWeaponArmorMaterials(String partial) {
        return tabCompletionCache.getOrDefault("weapons_armor", List.of()).stream()
                .filter(material -> material.startsWith(partial))
                .collect(Collectors.toList());
    }
    
    private List<String> getDebugOptions(String partial) {
        return tabCompletionCache.getOrDefault("debug_options", List.of()).stream()
                .filter(option -> option.startsWith(partial))
                .collect(Collectors.toList());
    }
    
    // ================================
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    // ================================
    
    private void showHelp(CommandSender sender) {
        sender.sendMessage(Component.text()
            .append(Component.text("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê").color(NamedTextColor.DARK_PURPLE))
            .append(Component.newline())
            .append(Component.text("  üéÅ ").color(NamedTextColor.LIGHT_PURPLE))
            .append(Component.text("RareItems").color(NamedTextColor.GOLD).decorate(TextDecoration.BOLD))
            .append(Component.text(" v3.0").color(NamedTextColor.GRAY))
            .append(Component.newline())
            .append(Component.text("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê").color(NamedTextColor.DARK_PURPLE))
            .build()
        );
        
        showCommandIfHasPermission(sender, "rareitems.admin.reload", 
            "/rareitems reload", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é");
        showCommandIfHasPermission(sender, "rareitems.admin.info", 
            "/rareitems info [—Ä–µ–¥–∫–æ—Å—Ç—å]", "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∫–æ—Å—Ç—è—Ö");
        showCommandIfHasPermission(sender, "rareitems.admin.give", 
            "/rareitems give <–∏–≥—Ä–æ–∫> <–º–∞—Ç–µ—Ä–∏–∞–ª> <—Ä–µ–¥–∫–æ—Å—Ç—å> [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]", "–í—ã–¥–∞—Ç—å —Ä–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç");
        showCommandIfHasPermission(sender, "rareitems.inspect", 
            "/rareitems inspect", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ —Ä—É–∫–µ");
        showCommandIfHasPermission(sender, "rareitems.admin.upgrade", 
            "/rareitems upgrade <—Ä–µ–¥–∫–æ—Å—Ç—å>", "–£–ª—É—á—à–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –¥–æ —Ä–µ–¥–∫–æ—Å—Ç–∏");
        showCommandIfHasPermission(sender, "rareitems.admin.debug", 
            "/rareitems debug [–æ–ø—Ü–∏—è]", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–º –æ—Ç–ª–∞–¥–∫–∏");
        showCommandIfHasPermission(sender, "rareitems.admin.validate", 
            "/rareitems validate", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
        
        sender.sendMessage(Component.text("  üîπ /rareitems help").color(NamedTextColor.WHITE)
                .append(Component.text(" - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É").color(NamedTextColor.GRAY)));
        
        sender.sendMessage(Component.text("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê").color(NamedTextColor.DARK_PURPLE));
    }
    
    private void showGeneralInfo(CommandSender sender) {
        var rarities = plugin.getConfigManager().getAllRarities();
        
        sender.sendMessage(Component.text()
                .append(Component.text("üé≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏: ").color(NamedTextColor.GOLD))
                .append(Component.text("(" + rarities.size() + ")").color(NamedTextColor.GRAY))
                .build());
        
        for (Rarity rarity : rarities) {
            sender.sendMessage(Component.text()
                    .append(Component.text("  ‚Ä¢ ").color(NamedTextColor.DARK_GRAY))
                    .append(Component.text(rarity.getDisplayName()).color(rarity.color()))
                    .append(Component.text(" (" + rarity.id() + ")").color(NamedTextColor.GRAY))
                    .append(Component.text(" - –®–∞–Ω—Å: ").color(NamedTextColor.GRAY))
                    .append(Component.text(formatChance(plugin.getConfigManager().getCraftChance(rarity.id()))).color(NamedTextColor.GREEN))
                    .build());
        }
        
        sender.sendMessage(Component.text("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rareitems info <—Ä–µ–¥–∫–æ—Å—Ç—å> –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
                .color(NamedTextColor.YELLOW));
    }
    
    private void showRarityInfo(CommandSender sender, String rarityId) {
        Rarity rarity = plugin.getConfigManager().getRarityById(rarityId);
        if (rarity == null) {
            sendErrorMessage(sender, "‚ùå –†–µ–¥–∫–æ—Å—Ç—å '" + rarityId + "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
            showAvailableRarities(sender);
            return;
        }
        
        showRarityAttributes(sender, rarity);
    }
    
    private void showItemInfo(Player player, ItemStack item, Rarity rarity) {
        player.sendMessage(Component.text("üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–µ:").color(NamedTextColor.GOLD));
        
        String materialName = formatMaterialName(item.getType());
        player.sendMessage(Component.text()
                .append(Component.text("  üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª: ").color(NamedTextColor.GRAY))
                .append(Component.text(materialName).color(NamedTextColor.WHITE))
                .build());
        
        player.sendMessage(Component.text()
                .append(Component.text("  ‚ú® –†–µ–¥–∫–æ—Å—Ç—å: ").color(NamedTextColor.GRAY))
                .append(Component.text(rarity.getDisplayName()).color(rarity.color()))
                .build());
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã
        showAttributeIfPresent(player, "‚öîÔ∏è", "–£—Ä–æ–Ω", rarity.damageBonus(), NamedTextColor.RED);
        showAttributeIfPresent(player, "üõ°Ô∏è", "–ë—Ä–æ–Ω—è", rarity.armorBonus(), NamedTextColor.BLUE);
        showAttributeIfPresent(player, "‚ö°", "–°–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏", rarity.attackSpeedBonus(), NamedTextColor.YELLOW);
        showAttributeIfPresent(player, "üîÑ", "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–Ω–∏—é", rarity.knockbackResistance(), NamedTextColor.DARK_PURPLE, "%");
        showAttributeIfPresent(player, "üíé", "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø—Ä–æ—á–Ω–æ—Å—Ç–∏", rarity.durabilityMultiplier(), NamedTextColor.AQUA, "x");
    }
    
    private void showRarityAttributes(CommandSender sender, Rarity rarity) {
        sender.sendMessage(Component.text()
                .append(Component.text("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–¥–∫–æ—Å—Ç–∏: ").color(NamedTextColor.GOLD))
                .append(Component.text(rarity.getDisplayName()).color(rarity.color()))
                .build());
        
        sender.sendMessage(Component.text()
                .append(Component.text("  üé≤ –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è: ").color(NamedTextColor.GRAY))
                .append(Component.text(formatChance(rarity.chance())).color(NamedTextColor.GREEN))
                .build());
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –±–æ–Ω—É—Å—ã
        if (rarity.damageBonus() > 0) {
            sender.sendMessage(Component.text()
                    .append(Component.text("  ‚öîÔ∏è –ë–æ–Ω—É—Å —É—Ä–æ–Ω–∞: +").color(NamedTextColor.GRAY))
                    .append(Component.text(formatNumber(rarity.damageBonus())).color(NamedTextColor.RED))
                    .build());
        }
        
        if (rarity.armorBonus() > 0) {
            sender.sendMessage(Component.text()
                    .append(Component.text("  üõ°Ô∏è –ë–æ–Ω—É—Å –±—Ä–æ–Ω–∏: +").color(NamedTextColor.GRAY))
                    .append(Component.text(formatNumber(rarity.armorBonus())).color(NamedTextColor.BLUE))
                    .build());
        }
        
        if (rarity.attackSpeedBonus() > 0) {
            sender.sendMessage(Component.text()
                    .append(Component.text("  ‚ö° –ë–æ–Ω—É—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏: +").color(NamedTextColor.GRAY))
                    .append(Component.text(formatNumber(rarity.attackSpeedBonus())).color(NamedTextColor.YELLOW))
                    .build());
        }
        
        if (rarity.knockbackResistance() > 0) {
            sender.sendMessage(Component.text()
                    .append(Component.text("  üîÑ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–Ω–∏—é: +").color(NamedTextColor.GRAY))
                    .append(Component.text(formatNumber(rarity.knockbackResistance() * 100) + "%").color(NamedTextColor.DARK_PURPLE))
                    .build());
        }
        
        if (rarity.durabilityMultiplier() != 1.0) {
            sender.sendMessage(Component.text()
                    .append(Component.text("  üíé –ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø—Ä–æ—á–Ω–æ—Å—Ç–∏: ").color(NamedTextColor.GRAY))
                    .append(Component.text("x" + formatNumber(rarity.durabilityMultiplier())).color(NamedTextColor.AQUA))
                    .build());
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        if (!rarity.specialAbilities().isEmpty()) {
            sender.sendMessage(Component.text("  üåü –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:").color(NamedTextColor.GOLD));
            for (String abilityKey : rarity.specialAbilities().keySet()) {
                Object abilityValue = rarity.specialAbilities().get(abilityKey);
                sender.sendMessage(Component.text()
                        .append(Component.text("    ‚Ä¢ ").color(NamedTextColor.DARK_GRAY))
                        .append(Component.text(abilityKey + ": " + abilityValue).color(NamedTextColor.LIGHT_PURPLE))
                        .build());
            }
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫—Ä–∞—Ñ—Ç–∞
        if (rarity.canCraft()) {
            sender.sendMessage(Component.text("  üî® –î–æ—Å—Ç—É–ø–µ–Ω –≤ –∫—Ä–∞—Ñ—Ç–µ").color(NamedTextColor.GREEN));
        }
        
        if (rarity.canFindInDungeons()) {
            sender.sendMessage(Component.text("  üè∞ –ú–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å—è—Ö").color(NamedTextColor.DARK_PURPLE));
        }
    }
    
    private void showAvailableRarities(CommandSender sender) {
        sender.sendMessage(Component.text("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–¥–∫–æ—Å—Ç–∏:").color(NamedTextColor.YELLOW));
        for (Rarity rarity : plugin.getConfigManager().getAllRarities()) {
            sender.sendMessage(Component.text()
                    .append(Component.text("  ‚Ä¢ ").color(NamedTextColor.DARK_GRAY))
                    .append(Component.text(rarity.id()).color(NamedTextColor.GRAY))
                    .append(Component.text(" - ").color(NamedTextColor.DARK_GRAY))
                    .append(Component.text(rarity.getDisplayName()).color(rarity.color()))
                    .build());
        }
    }
    
    private void showMaterialSuggestions(CommandSender sender) {
        sender.sendMessage(Component.text("üí° –ü—Ä–∏–º–µ—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: diamond_sword, iron_helmet, golden_chestplate, netherite_pickaxe")
                .color(NamedTextColor.GRAY));
    }
    
    private void showDebugInfo(CommandSender sender) {
        boolean debugMode = plugin.getConfigManager().isDebugMode();
        
        sender.sendMessage(Component.text("üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: ")
                .color(NamedTextColor.YELLOW)
                .append(Component.text(debugMode ? "–í–ö–õ–Æ–ß–ï–ù" : "–í–´–ö–õ–Æ–ß–ï–ù")
                        .color(debugMode ? NamedTextColor.GREEN : NamedTextColor.RED)));
        
        if (debugMode) {
            sender.sendMessage(Component.text("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rareitems debug false –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è")
                    .color(NamedTextColor.GRAY));
        } else {
            sender.sendMessage(Component.text("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rareitems debug true –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è")
                    .color(NamedTextColor.GRAY));
        }
    }
    
    private void handleDebugAction(CommandSender sender, String action) {
        boolean newValue = switch (action) {
            case "true", "on", "enable", "1" -> true;
            case "false", "off", "disable", "0" -> false;
            default -> {
                sendErrorMessage(sender, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –æ–ø—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: true/false, on/off, enable/disable");
                yield plugin.getConfigManager().isDebugMode(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            }
        };
        
        if (newValue == plugin.getConfigManager().isDebugMode() && 
            !List.of("true", "false", "on", "off", "enable", "disable", "1", "0").contains(action)) {
            return; // –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, –Ω–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        }
        
        plugin.getConfigManager().setDebugMode(newValue);
        
        sendSuccessMessage(sender, "üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ " + (newValue ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω"));
        
        if (newValue) {
            logDebug("–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω –∏–≥—Ä–æ–∫–æ–º: %s", sender.getName());
        }
    }
    
    // ================================
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    // ================================
    
    private boolean hasPermission(CommandSender sender, String permission) {
        if (!sender.hasPermission(permission)) {
            sendErrorMessage(sender, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã");
            return false;
        }
        return true;
    }
    
    private void showCommandIfHasPermission(CommandSender sender, String permission, String command, String description) {
        if (permission.isEmpty() || sender.hasPermission(permission)) {
            sender.sendMessage(Component.text()
                    .append(Component.text("  üîπ ").color(NamedTextColor.AQUA))
                    .append(Component.text(command).color(NamedTextColor.WHITE))
                    .append(Component.text(" - ").color(NamedTextColor.GRAY))
                    .append(Component.text(description).color(NamedTextColor.GRAY))
                    .build());
        }
    }
    
    private void showAttributeIfPresent(Player player, String icon, String name, double value, NamedTextColor color) {
        showAttributeIfPresent(player, icon, name, value, color, "");
    }
    
    private void showAttributeIfPresent(Player player, String icon, String name, double value, NamedTextColor color, String suffix) {
        if (value > 0) {
            player.sendMessage(Component.text()
                    .append(Component.text("  " + icon + " " + name + ": +").color(NamedTextColor.GRAY))
                    .append(Component.text(formatNumber(value) + suffix).color(color))
                    .build());
        }
    }
    
    private void sendErrorMessage(CommandSender sender, String message) {
        sender.sendMessage(Component.text(message).color(NamedTextColor.RED));
    }
    
    private void sendSuccessMessage(CommandSender sender, String message) {
        sender.sendMessage(Component.text(message).color(NamedTextColor.GREEN));
    }
    
    private void sendWarningMessage(CommandSender sender, String message) {
        sender.sendMessage(Component.text(message).color(NamedTextColor.YELLOW));
    }
    
    private void sendUsageMessage(CommandSender sender, String usage) {
        sender.sendMessage(Component.text("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: " + usage).color(NamedTextColor.YELLOW));
    }
    
    private void logDebug(String format, Object... args) {
        if (plugin.getConfigManager().isDebugMode()) {
            plugin.getLogger().info(String.format("[DEBUG] " + format, args));
        }
    }
    
    // ================================
    // –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    // ================================
    
    private int parseAmount(String amountStr) {
        try {
            return Math.max(1, Math.min(64, Integer.parseInt(amountStr)));
        } catch (NumberFormatException e) {
            return -1; // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—à–∏–±–∫–∏
        }
    }
    
    private Material parseMaterial(String materialName) {
        try {
            return Material.valueOf(materialName.toUpperCase());
        } catch (IllegalArgumentException e) {
            return null;
        }
    }
    
    private String formatMaterialName(Material material) {
        return capitalizeWords(material.name().toLowerCase().replace("_", " "));
    }
    
    private String capitalizeWords(String str) {
        if (str == null || str.isEmpty()) {
            return str;
        }
        
        String[] words = str.split(" ");
        StringBuilder result = new StringBuilder();
        
        for (int i = 0; i < words.length; i++) {
            if (i > 0) {
                result.append(" ");
            }
            
            String word = words[i];
            if (!word.isEmpty()) {
                result.append(Character.toUpperCase(word.charAt(0)));
                if (word.length() > 1) {
                    result.append(word.substring(1));
                }
            }
        }
        
        return result.toString();
    }
    
    private String formatNumber(double number) {
        if (number == (long) number) {
            return String.format("%d", (long) number);
        } else {
            return String.format("%.1f", number);
        }
    }
    
    private String formatChance(double chance) {
        return formatNumber(chance * 100) + "%";
    }
    
    private boolean isWeaponOrArmor(Material material) {
        return materialTypeChecker.isWeaponOrArmor(material);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     * @return —Å–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
     */
    private List<String> validateConfig() {
        List<String> issues = new ArrayList<>();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç–∏
        List<Rarity> rarities = plugin.getConfigManager().getAllRarities();
        if (rarities.isEmpty()) {
            issues.add("–ù–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
            return issues;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–Ω—Å—ã –∫—Ä–∞—Ñ—Ç–∞
        double totalChance = 0;
        for (Rarity rarity : rarities) {
            double chance = plugin.getConfigManager().getCraftChance(rarity.id());
            
            if (chance < 0) {
                issues.add("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —à–∞–Ω—Å –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏ '" + rarity.id() + "': " + chance);
            }
            if (chance > 100) {
                issues.add("–®–∞–Ω—Å –±–æ–ª—å—à–µ 100% –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏ '" + rarity.id() + "': " + chance);
            }
            
            totalChance += chance;
        }
        
        if (totalChance > 100) {
            issues.add("–û–±—â–∏–π —à–∞–Ω—Å –≤—Å–µ—Ö —Ä–µ–¥–∫–æ—Å—Ç–µ–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100%: " + formatChance(totalChance / 100));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        for (Rarity rarity : rarities) {
            if (rarity.damageBonus() < 0) {
                issues.add("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å —É—Ä–æ–Ω–∞ –¥–ª—è '" + rarity.id() + "': " + rarity.damageBonus());
            }
            if (rarity.armorBonus() < 0) {
                issues.add("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –±—Ä–æ–Ω–∏ –¥–ª—è '" + rarity.id() + "': " + rarity.armorBonus());
            }
            if (rarity.healthBonus() < 0) {
                issues.add("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è '" + rarity.id() + "': " + rarity.healthBonus());
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
            if (rarity.damageBonus() > 10) {
                issues.add("–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –±–æ–Ω—É—Å —É—Ä–æ–Ω–∞ –¥–ª—è '" + rarity.id() + "': " + rarity.damageBonus() + " (–º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å –±–∞–ª–∞–Ω—Å)");
            }
            if (rarity.armorBonus() > 10) {
                issues.add("–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –±–æ–Ω—É—Å –±—Ä–æ–Ω–∏ –¥–ª—è '" + rarity.id() + "': " + rarity.armorBonus() + " (–º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å –±–∞–ª–∞–Ω—Å)");
            }
            if (rarity.healthBonus() > 20) {
                issues.add("–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –±–æ–Ω—É—Å –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è '" + rarity.id() + "': " + rarity.healthBonus() + " (–º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å –±–∞–ª–∞–Ω—Å)");
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–≤—É–∫–∏ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        try {
            String craftSound = plugin.getConfigManager().getCraftSound();
            if (craftSound != null && !craftSound.equals("NONE") && !craftSound.isEmpty()) {
                org.bukkit.Sound.valueOf(craftSound);
            }
        } catch (IllegalArgumentException e) {
            issues.add("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–≤—É–∫ —Å–æ–∑–¥–∞–Ω–∏—è: " + plugin.getConfigManager().getCraftSound());
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∫–ª—é—á–µ–Ω–∏—è –º–æ—Ç—ã–≥
        boolean includeHoes = plugin.getConfig().getBoolean("settings.includeHoes", false);
        if (includeHoes) {
            issues.add("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ—Ç—ã–≥ –∫–∞–∫ –æ—Ä—É–∂–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤)");
        }
        
        return issues;
    }
} 