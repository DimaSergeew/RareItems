package org.bedepay.rareItems.util;

import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import net.kyori.adventure.text.format.TextColor;
import net.kyori.adventure.text.format.TextDecoration;
import net.kyori.adventure.text.minimessage.MiniMessage;
import org.bedepay.rareItems.RareItems;
import org.bedepay.rareItems.rarity.Rarity;
import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.attribute.Attribute;
import org.bukkit.attribute.AttributeModifier;

import org.bukkit.inventory.EquipmentSlot;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.persistence.PersistentDataType;
import org.bukkit.plugin.Plugin;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class ItemUtil {
    private static final MiniMessage miniMessage = MiniMessage.miniMessage();
    
    /**
     * Creates a NamespacedKey for the plugin
     */
    public static NamespacedKey getKey(Plugin plugin, String key) {
        return new NamespacedKey(plugin, key);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –æ—Ä—É–∂–∏–µ–º
     */
    private static boolean isWeapon(Material material) {
        String name = material.name();
        return name.endsWith("_SWORD") || name.endsWith("_AXE") || 
               name.equals("BOW") || name.equals("CROSSBOW") || name.equals("TRIDENT");
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –±—Ä–æ–Ω–µ–π
     */
    private static boolean isArmor(Material material) {
        String name = material.name();
        return name.endsWith("_HELMET") || name.endsWith("_CHESTPLATE") || 
               name.endsWith("_LEGGINGS") || name.endsWith("_BOOTS") ||
               name.equals("SHIELD"); // –©–∏—Ç—ã —Ç–æ–∂–µ –±—Ä–æ–Ω—è
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–µ–¥–∫–æ—Å—Ç—å –∫ –ø—Ä–µ–¥–º–µ—Ç—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UI –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
     */
    public static ItemStack applyRarity(RareItems plugin, ItemStack item, Rarity rarity) {
        ItemStack clonedItem = item.clone();
        ItemMeta meta = clonedItem.getItemMeta();
        
        if (meta == null) {
            return clonedItem;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –ø—Ä–µ–¥–º–µ—Ç–∞
        double baseDamage = getBaseDamage(clonedItem.getType());
        double baseArmor = getBaseArmor(clonedItem.getType());
        double baseAttackSpeed = getBaseAttackSpeed(clonedItem.getType());
        
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        Component displayName = createDisplayName(clonedItem.getType(), rarity);
        meta.displayName(displayName);
        
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        List<Component> lore = createLore(rarity, baseDamage, baseArmor, baseAttackSpeed, clonedItem.getType());
        meta.lore(lore);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –≤ NBT
        meta.getPersistentDataContainer().set(
                getKey(plugin, "rarity"),
                PersistentDataType.STRING,
                rarity.getId()
        );
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã (–¥–æ–±–∞–≤–ª—è–µ–º –∫ –±–∞–∑–æ–≤—ã–º, –∞ –Ω–µ –∑–∞–º–µ–Ω—è–µ–º)
        applyCorrectAttributes(plugin, meta, clonedItem.getType(), rarity, baseDamage, baseArmor, baseAttackSpeed);
        
        clonedItem.setItemMeta(meta);
        return clonedItem;
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–¥–∫–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ NBT
     */
    public static Rarity getRarity(ItemStack item) {
        if (item == null || item.getType() == Material.AIR) {
            return null;
        }
        
        ItemMeta meta = item.getItemMeta();
        if (meta == null) {
            return null;
        }
        
        String rarityId = meta.getPersistentDataContainer().get(
                new NamespacedKey("rareitems", "rarity"),
                PersistentDataType.STRING
        );
        
        if (rarityId == null) {
            return null;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–≥–∏–Ω —á–µ—Ä–µ–∑ Bukkit –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ ConfigManager
        RareItems plugin = (RareItems) org.bukkit.Bukkit.getPluginManager().getPlugin("RareItems");
        if (plugin == null) {
            return null;
        }
        
        return plugin.getConfigManager().getRarityById(rarityId);
    }
    
    private static Component createDisplayName(Material material, Rarity rarity) {
        String materialName = material.name().toLowerCase().replace('_', ' ');
        String capitalizedName = capitalizeWords(materialName);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–º —Ä–µ–¥–∫–æ—Å—Ç–∏
        Component rarityComponent = Component.text(rarity.getName() + " ")
                .color(rarity.getColor())
                .decoration(TextDecoration.ITALIC, false);
        
        Component nameComponent = Component.text(capitalizedName)
                .color(NamedTextColor.WHITE)
                .decoration(TextDecoration.ITALIC, false);
        
        return rarityComponent.append(nameComponent);
    }
    
    private static List<Component> createLore(Rarity rarity, double baseDamage, double baseArmor, double baseAttackSpeed, Material material) {
        List<Component> lore = new ArrayList<>();
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–¥–∫–æ—Å—Ç–∏ —Å –∑–≤–µ–∑–¥–∞–º–∏
        String stars = getRarityStars(rarity.getId());
        Component rarityHeader = Component.text(stars + " " + rarity.getName() + " " + stars)
                .color(rarity.getColor())
                .decoration(TextDecoration.BOLD, true)
                .decoration(TextDecoration.ITALIC, false);
        lore.add(rarityHeader);
        
        // –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏
        List<String> bonuses = new ArrayList<>();
        
        if (rarity.getDamageBonus() > 0 && isWeapon(material)) {
            // –î–ª—è –æ—Ä—É–∂–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–Ω
            double totalDamage = baseDamage + rarity.getDamageBonus();
            bonuses.add(formatBonus(totalDamage) + "‚öî (+" + formatBonus(rarity.getDamageBonus()) + ")");
        }
        if (rarity.getArmorBonus() > 0 && isArmor(material)) {
            // –î–ª—è –±—Ä–æ–Ω–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∑–∞—â–∏—Ç—É
            double totalArmor = baseArmor + rarity.getArmorBonus();
            bonuses.add(formatBonus(totalArmor) + "üõ° (+" + formatBonus(rarity.getArmorBonus()) + ")");
        }
        if (rarity.getHealthBonus() > 0) {
            bonuses.add("+" + formatBonus(rarity.getHealthBonus()) + "‚ù§");
        }
        if (rarity.getLuckBonus() > 0) {
            bonuses.add("+" + formatBonus(rarity.getLuckBonus()) + "üçÄ");
        }
        
        if (!bonuses.isEmpty()) {
            Component bonusLine = Component.text("–ë–æ–Ω—É—Å—ã: " + String.join(" ", bonuses))
                    .color(NamedTextColor.GRAY)
                    .decoration(TextDecoration.ITALIC, false);
            lore.add(bonusLine);
        }
        
        // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        String itemTypeAbility = getItemTypeAbility(material, rarity);
        if (itemTypeAbility != null) {
            Component abilityLine = Component.text("‚ú® " + itemTypeAbility)
                    .color(NamedTextColor.YELLOW)
                    .decoration(TextDecoration.ITALIC, false);
            lore.add(abilityLine);
        }
        
        // –û–±—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ —É–¥–∞—Ä–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å)
        if (!rarity.getOnHitEffects().isEmpty()) {
            StringBuilder effects = new StringBuilder();
            rarity.getOnHitEffects().forEach((effect, amplifier) -> {
                if (effects.length() > 0) effects.append(", ");
                effects.append(getShortEffectName(effect.getName()));
            });
            
            Component effectLine = Component.text("‚ö° " + effects.toString() + " (" + (int)rarity.getEffectChance() + "%)")
                    .color(NamedTextColor.RED)
                    .decoration(TextDecoration.ITALIC, false);
            lore.add(effectLine);
        }
        
        return lore;
    }
    
    private static String getRarityStars(String rarityId) {
        return switch (rarityId) {
            case "celestial" -> "‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶";
            case "divine" -> "‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶";
            case "mythic" -> "‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶";
            case "legendary" -> "‚ú¶‚ú¶‚ú¶‚ú¶‚ú¶";
            case "epic" -> "‚ú¶‚ú¶‚ú¶‚ú¶";
            case "rare" -> "‚ú¶‚ú¶‚ú¶";
            case "uncommon" -> "‚ú¶‚ú¶";
            default -> "‚ú¶";
        };
    }
    
    private static String getEffectName(String effectKey) {
        return switch (effectKey.toLowerCase()) {
            case "poison" -> "–û—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ";
            case "slowness" -> "–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ";
            case "weakness" -> "–°–ª–∞–±–æ—Å—Ç—å";
            case "wither" -> "–ò—Å—Å—É—à–µ–Ω–∏–µ";
            case "blindness" -> "–°–ª–µ–ø–æ—Ç–∞";
            case "nausea" -> "–¢–æ—à–Ω–æ—Ç–∞";
            case "levitation" -> "–õ–µ–≤–∏—Ç–∞—Ü–∏—è";
            case "unluck" -> "–ù–µ—É–¥–∞—á–∞";
            case "slow_falling" -> "–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ";
            default -> effectKey;
        };
    }
    
    private static String getShortEffectName(String effectKey) {
        return switch (effectKey.toLowerCase()) {
            case "poison" -> "–Ø–¥";
            case "slowness" -> "–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ";
            case "weakness" -> "–°–ª–∞–±–æ—Å—Ç—å";
            case "wither" -> "–ò—Å—Å—É—à–µ–Ω–∏–µ";
            case "blindness" -> "–°–ª–µ–ø–æ—Ç–∞";
            case "nausea" -> "–¢–æ—à–Ω–æ—Ç–∞";
            case "levitation" -> "–õ–µ–≤–∏—Ç–∞—Ü–∏—è";
            case "unluck" -> "–ù–µ—É–¥–∞—á–∞";
            default -> effectKey;
        };
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
     */
    private static String getItemTypeAbility(Material material, Rarity rarity) {
        String materialName = material.name();
        String rarityId = rarity.getId();
        
        // –ú–µ—á–∏ - —É—Ä–æ–Ω –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–¥–∞—Ä—ã
        if (materialName.endsWith("_SWORD")) {
            return switch (rarityId) {
                case "uncommon" -> "–û—Å—Ç—Ä–æ–µ –ª–µ–∑–≤–∏–µ (+5% –∫—Ä–∏—Ç)";
                case "rare" -> "–¢–æ—á–Ω—ã–π —É–¥–∞—Ä (+10% –∫—Ä–∏—Ç)";
                case "epic" -> "–ú–∞—Å—Ç–µ—Ä—Å–∫–∏–π —É–¥–∞—Ä (+15% –∫—Ä–∏—Ç)";
                case "legendary" -> "–°–º–µ—Ä—Ç–æ–Ω–æ—Å–Ω–æ–µ –ª–µ–∑–≤–∏–µ (+20% –∫—Ä–∏—Ç)";
                case "mythic" -> "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –∑–∞—Ç–æ—á–∫–∞ (+25% –∫—Ä–∏—Ç)";
                case "divine" -> "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Å—Ç—Ä–æ—Ç–∞ (+30% –∫—Ä–∏—Ç)";
                case "celestial" -> "–ù–µ–±–µ—Å–Ω–æ–µ –ª–µ–∑–≤–∏–µ (+35% –∫—Ä–∏—Ç)";
                default -> null;
            };
        }
        
        // –¢–æ–ø–æ—Ä—ã - –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –∏ —É—Ä–æ–Ω –ø–æ —â–∏—Ç–∞–º
        if (materialName.endsWith("_AXE")) {
            return switch (rarityId) {
                case "uncommon" -> "–¢—è–∂–µ–ª—ã–π —É–¥–∞—Ä";
                case "rare" -> "–°–æ–∫—Ä—É—à–µ–Ω–∏–µ —â–∏—Ç–æ–≤";
                case "epic" -> "–û–≥–ª—É—à–∞—é—â–∏–π —É–¥–∞—Ä";
                case "legendary" -> "–°–æ–∫—Ä—É—à–µ–Ω–∏–µ –±—Ä–æ–Ω–∏";
                case "mythic" -> "–†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å –∑–∞—â–∏—Ç—ã";
                case "divine" -> "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–æ—â—å";
                case "celestial" -> "–ù–µ–±–µ—Å–Ω—ã–π –º–æ–ª–æ—Ç";
                default -> null;
            };
        }
        
        // –¢—Ä–µ–∑—É–±—Ü—ã - –≤–æ–¥–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        if (materialName.equals("TRIDENT")) {
            return switch (rarityId) {
                case "uncommon" -> "–í–æ–¥–Ω–∞—è —Å—Ç–∏—Ö–∏—è";
                case "rare" -> "–ü—Ä–∏—Ç—è–≥–∏–≤–∞–Ω–∏–µ –≤—Ä–∞–≥–æ–≤";
                case "epic" -> "–ú–æ–ª–Ω–∏—è –ø—Ä–∏ –±—Ä–æ—Å–∫–µ";
                case "legendary" -> "–í–æ–¥–Ω—ã–π –≤–∏—Ö—Ä—å";
                case "mythic" -> "–ë—É—Ä—è –∏ –º–æ–ª–Ω–∏–∏";
                case "divine" -> "–ü–æ—Ç–æ–ø";
                case "celestial" -> "–í–ª–∞–¥—ã–∫–∞ –º–æ—Ä–µ–π";
                default -> null;
            };
        }
        
        // –õ—É–∫–∏ - —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –ø—Ä–æ–±–∏–≤–∞–Ω–∏–µ
        if (materialName.equals("BOW") || materialName.equals("CROSSBOW")) {
            return switch (rarityId) {
                case "uncommon" -> "–ë—ã—Å—Ç—Ä–∞—è —Å—Ç—Ä–µ–ª—å–±–∞";
                case "rare" -> "–¢–æ—á–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª";
                case "epic" -> "–ü—Ä–æ–±–∏–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏";
                case "legendary" -> "–û–≥–Ω–µ–Ω–Ω—ã–µ —Å—Ç—Ä–µ–ª—ã";
                case "mythic" -> "–í–∑—Ä—ã–≤–Ω—ã–µ —Å—Ç—Ä–µ–ª—ã";
                case "divine" -> "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª";
                case "celestial" -> "–ù–µ–±–µ—Å–Ω—ã–µ —Å—Ç—Ä–µ–ª—ã";
                default -> null;
            };
        }
        
        // –®–ª–µ–º—ã - –∑–∞—â–∏—Ç–∞ –≥–æ–ª–æ–≤—ã –∏ –≤–∏–¥–µ–Ω–∏–µ
        if (materialName.endsWith("_HELMET")) {
            return switch (rarityId) {
                case "uncommon" -> "–Ø—Å–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ";
                case "rare" -> "–ù–æ—á–Ω–æ–µ –≤–∏–¥–µ–Ω–∏–µ";
                case "epic" -> "–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–µ–ø–æ—Ç—ã";
                case "legendary" -> "–í–æ–¥–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ";
                case "mythic" -> "–û–≥–Ω–µ–Ω–Ω—ã–π –∏–º–º—É–Ω–∏—Ç–µ—Ç";
                case "divine" -> "–¢–µ–ª–µ–ø–∞—Ç–∏—è";
                case "celestial" -> "–í—Å–µ–≤–∏–¥—è—â–µ–µ –æ–∫–æ";
                default -> null;
            };
        }
        
        // –ù–∞–≥—Ä—É–¥–Ω–∏–∫–∏ - –∑–∞—â–∏—Ç–∞ —Ç–µ–ª–∞ –∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        if (materialName.endsWith("_CHESTPLATE")) {
            return switch (rarityId) {
                case "uncommon" -> "–ü—Ä–æ—á–Ω–∞—è –∑–∞—â–∏—Ç–∞";
                case "rare" -> "–ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ";
                case "epic" -> "–û—Ç—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞";
                case "legendary" -> "–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è";
                case "mythic" -> "–ë–∞—Ä—å–µ—Ä —Å–∏–ª—ã";
                case "divine" -> "–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞";
                case "celestial" -> "–ù–µ–±–µ—Å–Ω–∞—è –±—Ä–æ–Ω—è";
                default -> null;
            };
        }
        
        // –ü–æ–Ω–æ–∂–∏ - –∑–∞—â–∏—Ç–∞ –Ω–æ–≥ –∏ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å
        if (materialName.endsWith("_LEGGINGS")) {
            return switch (rarityId) {
                case "uncommon" -> "–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å";
                case "rare" -> "–ë—ã—Å—Ç—Ä—ã–π –±–µ–≥";
                case "epic" -> "–í—ã—Å–æ–∫–∏–π –ø—Ä—ã–∂–æ–∫";
                case "legendary" -> "–ù–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å –∫ –æ—Ç–±—Ä–æ—Å—É";
                case "mythic" -> "–§–∞–∑–æ–≤—ã–π —à–∞–≥";
                case "divine" -> "–¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è";
                case "celestial" -> "–ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞";
                default -> null;
            };
        }
        
        // –ë–æ—Ç–∏–Ω–∫–∏ - –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ –∏ —Å–ø–µ—Ü—ç—Ñ—Ñ–µ–∫—Ç—ã
        if (materialName.endsWith("_BOOTS")) {
            return switch (rarityId) {
                case "uncommon" -> "–õ–µ–≥–∫–∞—è –ø–æ—Ö–æ–¥–∫–∞";
                case "rare" -> "–•–æ–∂–¥–µ–Ω–∏–µ –ø–æ –≤–æ–¥–µ";
                case "epic" -> "–õ–µ–¥—è–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞";
                case "legendary" -> "–û–≥–Ω–µ–Ω–Ω—ã–µ —Å–ª–µ–¥—ã";
                case "mythic" -> "–ü–æ–ª–µ—Ç";
                case "divine" -> "–•–æ–∂–¥–µ–Ω–∏–µ –ø–æ –ª–∞–≤–µ";
                case "celestial" -> "–¢–µ–ª–µ–ø–æ—Ä—Ç –ø—Ä–∏ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–∏";
                default -> null;
            };
        }
        
        return null;
    }
    
    private static String getRomanNumeral(int number) {
        return switch (number) {
            case 1 -> "I";
            case 2 -> "II";
            case 3 -> "III";
            case 4 -> "IV";
            case 5 -> "V";
            default -> String.valueOf(number);
        };
    }
    
    private static String capitalizeWords(String str) {
        String[] words = str.split(" ");
        StringBuilder result = new StringBuilder();
        
        for (int i = 0; i < words.length; i++) {
            if (i > 0) result.append(" ");
            if (words[i].length() > 0) {
                result.append(Character.toUpperCase(words[i].charAt(0)));
                if (words[i].length() > 1) {
                    result.append(words[i].substring(1).toLowerCase());
                }
            }
        }
        
        return result.toString();
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–æ–Ω—É—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞ –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 1)
     */
    private static String formatBonus(double bonus) {
        if (bonus == (int) bonus) {
            // –ï—Å–ª–∏ —á–∏—Å–ª–æ —Ü–µ–ª–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–∑ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö
            return String.valueOf((int) bonus);
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –æ–¥–Ω–∏–º –∑–Ω–∞–∫–æ–º –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            return String.format("%.1f", bonus);
        }
    }
    

    
    private static void applyCorrectAttributes(RareItems plugin, ItemMeta meta, Material material, Rarity rarity, 
                                              double baseDamage, double baseArmor, double baseAttackSpeed) {
        EquipmentSlot slot = getEquipmentSlot(material);
        
        // –ê—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –æ—Ä—É–∂–∏—è
        if (isWeapon(material) && rarity.getDamageBonus() > 0) {
            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã —É—Ä–æ–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            meta.removeAttributeModifier(Attribute.GENERIC_ATTACK_DAMAGE);
            
            // –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–Ω: –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω + –±–æ–Ω—É—Å —Ä–µ–¥–∫–æ—Å—Ç–∏
            double totalDamage = baseDamage + rarity.getDamageBonus();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç —Å –ø–æ–ª–Ω—ã–º —É—Ä–æ–Ω–æ–º –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ä—É–∫–∏
            meta.addAttributeModifier(
                    Attribute.GENERIC_ATTACK_DAMAGE,
                    new AttributeModifier(
                            UUID.randomUUID(),
                            "generic.attack_damage",
                            totalDamage,
                            AttributeModifier.Operation.ADD_NUMBER,
                            EquipmentSlot.HAND
                    )
            );
            
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if (plugin.getConfigManager().isDebugMode()) {
                plugin.getLogger().info(String.format("[RareItems Debug] –û—Ä—É–∂–∏–µ: %s | –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω: %.1f | –ë–æ–Ω—É—Å: %.1f | –ò—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–Ω: %.1f", 
                                        material.name(), baseDamage, rarity.getDamageBonus(), totalDamage));
            }
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏ –¥–ª—è –æ—Ä—É–∂–∏—è (–≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É—Ä–æ–Ω–∞)
        if (isWeapon(material)) {
            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏
            meta.removeAttributeModifier(Attribute.GENERIC_ATTACK_SPEED);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏ (–±–µ–∑ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ PvP)
            meta.addAttributeModifier(
                    Attribute.GENERIC_ATTACK_SPEED,
                    new AttributeModifier(
                            UUID.randomUUID(),
                            "generic.attack_speed",
                            baseAttackSpeed,
                            AttributeModifier.Operation.ADD_NUMBER,
                            EquipmentSlot.HAND
                    )
            );
        }
        
        // –ê—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏
        if (isArmor(material)) {
            if (rarity.getArmorBonus() > 0) {
                // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã –±—Ä–æ–Ω–∏
                meta.removeAttributeModifier(Attribute.GENERIC_ARMOR);
                
                // –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∑–∞—â–∏—Ç—É: –±–∞–∑–æ–≤–∞—è + –±–æ–Ω—É—Å
                double totalArmor = baseArmor + rarity.getArmorBonus();
                
                meta.addAttributeModifier(
                        Attribute.GENERIC_ARMOR,
                        new AttributeModifier(
                                UUID.randomUUID(),
                                "generic.armor",
                                totalArmor,
                                AttributeModifier.Operation.ADD_NUMBER,
                                slot
                        )
                );
            }
            
            if (rarity.getToughnessBonus() > 0) {
                // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã –ø—Ä–æ—á–Ω–æ—Å—Ç–∏
                meta.removeAttributeModifier(Attribute.GENERIC_ARMOR_TOUGHNESS);
                
                meta.addAttributeModifier(
                        Attribute.GENERIC_ARMOR_TOUGHNESS,
                        new AttributeModifier(
                                UUID.randomUUID(),
                                "generic.armor_toughness",
                                rarity.getToughnessBonus(),
                                AttributeModifier.Operation.ADD_NUMBER,
                                slot
                        )
                );
            }
            
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –±—Ä–æ–Ω–∏
            if (plugin.getConfigManager().isDebugMode()) {
                double totalArmor = baseArmor + rarity.getArmorBonus();
                plugin.getLogger().info(String.format("[RareItems Debug] –ë—Ä–æ–Ω—è: %s | –ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞: %.1f | –ë–æ–Ω—É—Å –∑–∞—â–∏—Ç—ã: %.1f | –ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—â–∏—Ç–∞: %.1f | –ü—Ä–æ—á–Ω–æ—Å—Ç—å: %.1f", 
                                        material.name(), baseArmor, rarity.getArmorBonus(), totalArmor, rarity.getToughnessBonus()));
            }
        }
        
        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã (–ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ –≤—Å–µ–º —Ç–∏–ø–∞–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤)
        if (rarity.getHealthBonus() > 0) {
            meta.addAttributeModifier(
                    Attribute.GENERIC_MAX_HEALTH,
                    new AttributeModifier(
                            UUID.randomUUID(),
                            "rarity.health.bonus",
                            rarity.getHealthBonus(),
                            AttributeModifier.Operation.ADD_NUMBER,
                            slot
                    )
            );
        }
        
        if (rarity.getSpeedBonus() > 0) {
            meta.addAttributeModifier(
                    Attribute.GENERIC_MOVEMENT_SPEED,
                    new AttributeModifier(
                            UUID.randomUUID(),
                            "rarity.speed.bonus",
                            rarity.getSpeedBonus(),
                            AttributeModifier.Operation.MULTIPLY_SCALAR_1,
                            slot
                    )
            );
        }
        
        if (rarity.getLuckBonus() > 0) {
            meta.addAttributeModifier(
                    Attribute.GENERIC_LUCK,
                    new AttributeModifier(
                            UUID.randomUUID(),
                            "rarity.luck.bonus",
                            rarity.getLuckBonus(),
                            AttributeModifier.Operation.ADD_NUMBER,
                            slot
                    )
            );
        }
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        if (plugin.getConfigManager().isDebugMode() && 
            (rarity.getHealthBonus() > 0 || rarity.getSpeedBonus() > 0 || rarity.getLuckBonus() > 0)) {
            plugin.getLogger().info(String.format("[RareItems Debug] –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã %s | –ó–¥–æ—Ä–æ–≤—å–µ: +%.1f | –°–∫–æ—Ä–æ—Å—Ç—å: +%.1f%% | –£–¥–∞—á–∞: +%.1f", 
                                    material.name(), rarity.getHealthBonus(), rarity.getSpeedBonus() * 100, rarity.getLuckBonus()));
        }
    }
    

    
    private static double getBaseDamage(Material material) {
        return switch (material) {
            case WOODEN_SWORD -> 4.0;
            case STONE_SWORD -> 5.0;
            case IRON_SWORD -> 6.0;
            case GOLDEN_SWORD -> 4.0;
            case DIAMOND_SWORD -> 7.0;
            case NETHERITE_SWORD -> 8.0;
            case WOODEN_AXE -> 7.0;
            case STONE_AXE -> 9.0;
            case IRON_AXE -> 9.0;
            case GOLDEN_AXE -> 7.0;
            case DIAMOND_AXE -> 9.0;
            case NETHERITE_AXE -> 10.0;
            case BOW -> 0.0;
            case CROSSBOW -> 0.0;
            case TRIDENT -> 9.0;
            default -> 0.0;
        };
    }
    
    private static double getBaseArmor(Material material) {
        return switch (material) {
            case LEATHER_HELMET, GOLDEN_HELMET, CHAINMAIL_HELMET -> 1.0;
            case IRON_HELMET -> 2.0;
            case DIAMOND_HELMET, NETHERITE_HELMET -> 3.0;
            
            case LEATHER_CHESTPLATE, GOLDEN_CHESTPLATE -> 3.0;
            case CHAINMAIL_CHESTPLATE -> 5.0;
            case IRON_CHESTPLATE -> 6.0;
            case DIAMOND_CHESTPLATE -> 8.0;
            case NETHERITE_CHESTPLATE -> 8.0;
            
            case LEATHER_LEGGINGS, GOLDEN_LEGGINGS -> 2.0;
            case CHAINMAIL_LEGGINGS -> 4.0;
            case IRON_LEGGINGS -> 5.0;
            case DIAMOND_LEGGINGS -> 6.0;
            case NETHERITE_LEGGINGS -> 6.0;
            
            case LEATHER_BOOTS, GOLDEN_BOOTS, CHAINMAIL_BOOTS -> 1.0;
            case IRON_BOOTS -> 2.0;
            case DIAMOND_BOOTS, NETHERITE_BOOTS -> 3.0;
            
            case SHIELD -> 0.0; // –©–∏—Ç—ã –Ω–µ –¥–∞—é—Ç –±–∞–∑–æ–≤–æ–π –∑–∞—â–∏—Ç—ã –≤ –≤–∞–Ω–∏–ª–∏
            
            default -> 0.0;
        };
    }
    
    private static double getBaseAttackSpeed(Material material) {
        return switch (material) {
            case WOODEN_SWORD, STONE_SWORD, IRON_SWORD, GOLDEN_SWORD, DIAMOND_SWORD, NETHERITE_SWORD -> 1.6;
            case WOODEN_AXE, GOLDEN_AXE -> 0.8;
            case STONE_AXE -> 0.8;
            case IRON_AXE -> 0.9;
            case DIAMOND_AXE -> 1.0;
            case NETHERITE_AXE -> 1.0;
            case TRIDENT -> 1.1;
            default -> 0.0;
        };
    }
    
    private static EquipmentSlot getEquipmentSlot(Material material) {
        String name = material.name();
        
        if (name.endsWith("_HELMET")) {
            return EquipmentSlot.HEAD;
        } else if (name.endsWith("_CHESTPLATE")) {
            return EquipmentSlot.CHEST;
        } else if (name.endsWith("_LEGGINGS")) {
            return EquipmentSlot.LEGS;
        } else if (name.endsWith("_BOOTS")) {
            return EquipmentSlot.FEET;
        } else if (name.equals("SHIELD")) {
            return EquipmentSlot.OFF_HAND;
        } else {
            return EquipmentSlot.HAND;
        }
    }
} 